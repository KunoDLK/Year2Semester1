---------------------------------------------------------------------
-- TSQL-Mod09 - Grouping and Aggregating Data
-- Author: Mansha Nawaz

-- LAB 09 - Exercise 1 - Solutions
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Task 2 - solution A
---------------------------------------------------------------------
-- Write a SELECT statement that will return groups of customers that made a purchase. 
-- The SELECT clause should include the custid column from the Sales.Orders table 
-- and the contactname column from the Sales.Customers table. 
-- Group by both columns and filter only the orders from the sales employee whose empid equals five.
-- Execute the written statement and review the model solution.  
---------------------------------------------------------------------

-- Step 1: make sure you use the appropriate database
USE TSQL;
-- make sure you work on the correct Database sample. 
ALTER AUTHORIZATION ON DATABASE::TSQL TO sa;
-- The sample Databases are defaulted to your Module Leaders server/password. 
-- first time users will need to reassign access (authorisation) to the
-- default System Adiministator - the person logged in which will be you! 
GO
---------------------------------------------------------------------

-- Step 2: Checking the data from table: Sales.Orders and Sales.Customers  
-- note the relationship: each Customer can have many Orders. 
SELECT *
FROM Sales.Orders
SELECT *
FROM Sales.Customers

-- Step 3: Join on key Orders.custid and Customers.custid
SELECT Sales.Orders.custid, Sales.Customers.contactname
FROM Sales.Orders 
INNER JOIN Sales.Customers ON Sales.Customers.custid = Sales.Orders.custid

-- Step 4: Group By custid and contactname
SELECT
	Sales.Orders.custid, Sales.Customers.contactname
FROM Sales.Orders 
INNER JOIN Sales.Customers ON Sales.Customers.custid = Sales.Orders.custid
GROUP BY Sales.Orders.custid, Sales.Customers.contactname;

-- Step 5: provide for empid = 5
SELECT
	Sales.Orders.custid, Sales.Customers.contactname
FROM Sales.Orders 
INNER JOIN Sales.Customers ON Sales.Customers.custid = Sales.Orders.custid
WHERE Sales.Orders.empid = 5

GROUP BY Sales.Orders.custid, Sales.Customers.contactname 
 order by custid; -- Note: remove ; from above line when uncommenting order by. 

---------------------------------------------------------------------
-- Task 2 - Alternative solution using Table Alias names
---------------------------------------------------------------------
-- Write a SELECT statement that will return groups of customers that made a purchase. 
-- The SELECT clause should include the custid column from the Sales.Orders table 
-- and the contactname column from the Sales.Customers table. 
-- Group by both columns and filter only the orders from the sales employee whose empid equals five.
-- Execute the written statement and review the results to make sure they provide the desired data. 
---------------------------------------------------------------------
SELECT
	o.custid, c.contactname
FROM Sales.Orders AS o
INNER JOIN Sales.Customers AS c ON c.custid = o.custid
WHERE o.empid = 5
GROUP BY o.custid, c.contactname;

---------------------------------------------------------------------
-- Task 3 - Solution with error
---------------------------------------------------------------------
-- Copy the T-SQL statement in task 2 and modify it to include the city column 
-- from the Sales.Customers table in the SELECT clause. 
-- Execute the query. You will get an error. What is the error message? Why?
-- What column is cannot be aggregated and thereby generating an error? 
-- Correct the query so that it will execute properly.
---------------------------------------------------------------------
-- Step 3a - error generated by following above approach 
-- You need to also aggeragate or group the column customer city!
SELECT
	o.custid, c.contactname, c.city
FROM Sales.Orders AS o
INNER JOIN Sales.Customers AS c ON c.custid = o.custid
WHERE o.empid = 5
GROUP BY o.custid, c.contactname;
-- error: Column 'Sales.Customers.city' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.

---------------------------------------------------------------------
-- Task 3 - Solution with error corrected. 
-- Step 3b - fixing the error to include grouping of customer city. 
SELECT
	o.custid, c.contactname, c.city
FROM Sales.Orders AS o
INNER JOIN Sales.Customers AS c ON c.custid = o.custid
WHERE o.empid = 5
GROUP BY o.custid, c.contactname, c.city;

---------------------------------------------------------------------
-- Task 4 - Solution
-- Write a SELECT statement that will return groups of rows based on the custid 
-- column and a calculated column orderyear representing the order year based on 
-- the orderdate column from the Sales.Orders table. 
-- Filter the results to include only the orders from the sales employee whose empid equal five.
-- Execute the written statement and review the results to make sure they provide the desired data. 
---------------------------------------------------------------------
SELECT
	custid, YEAR(orderdate) AS orderyear
FROM Sales.Orders
WHERE empid = 5
GROUP BY custid, YEAR(orderdate)
ORDER BY custid, orderyear;


---------------------------------------------------------------------
-- Task 5 - Solution
-- 
-- Write a SELECT statement to retrieve groups of rows based on the categoryname column in
-- the Production.Categories table. Filter the results to include only the product categories
-- that were ordered in the year 2008.
-- Execute the written statement and review the results.
---------------------------------------------------------------------
SELECT
	c.categoryid, c.categoryname
FROM Sales.Orders AS o
INNER JOIN Sales.OrderDetails AS d ON d.orderid = o.orderid
INNER JOIN Production.Products AS p ON p.productid = d.productid
INNER JOIN Production.Categories AS c ON c.categoryid = p.categoryid
WHERE orderdate >= '20080101' AND orderdate < '20090101'
GROUP BY c.categoryid, c.categoryname;


